#!/usr/bin/env node
/*
long term:
  node:
    - interfaces with wallet client and transaction libraries
  client specs:
    open-channel [pubkey@host] [amount]

multi-sig mini:
  specs:
    multisig
*/
'use strict';


const fs = require('fs');
const bcoin = require('../lib/bcoin');
const KeyRing = bcoin.wallet.WalletKey;
const Script = bcoin.Script;
const network = bcoin.Network.get('regtest');
const MTX = bcoin.MTX;
const Coin = bcoin.Coin;

const {NodeClient} = require('bclient');

const options = {
  network: network.type,
  port: network.rpcPort,
  apiKey: 'change-this-key'
}

const nodeClient = new NodeClient(options);

function getKeyRing() {
  try {
    const secret1 = fs.readFileSync(`./${network.type}-private-key.wif`).toString();
    const ring = KeyRing.fromSecret(secret1);
    return ring;
  } catch(err) {
    if (err.code == "ENOENT") {
      const _ring = KeyRing.generate(true, network.type);
      fs.writeFileSync(`${network.type}-private-key.wif`, _ring.toSecret(network.type));
      return getKeyRing()
    } else {
      throw(err)
    }
  }
}

const m = 2;
const n = 2;
const keyRing = getKeyRing()
const address = keyRing.getAddress("string", network.type);

const otherPubKey = process.argv[2];
const sats = parseInt(process.argv[3]);
const pubKeys = [keyRing.publicKey, Buffer.from(otherPubKey, "hex")];

const multisigScript = Script.fromMultisig(m, n, pubKeys);
// const script = Script.fromScripthash(multisigScript.hash160());
const multisigAddr = multisigScript.getAddress().toBase58(network.type);

(async () => {
  try {
    const result = await nodeClient.getTXByAddress(address);
    const tx = result[0];
    const utxo = tx.outputs[0];
    const value = utxo.value;
    const txHash = tx.hash;
    const script = utxo.script;
    const coin = Coin.fromJSON({
      version: 1,
      height: -1,
      value: value,
      coinbase: false,

      script: script,
      hash: txHash,
      index: 0
    });


    const mtx = new MTX();

    mtx.addOutput({
      address: multisigAddr,
      value: sats,
    });

    await mtx.fund([coin], {
      rate: 1000,

      changeAddress: address
    });

    mtx.scriptInput(0, coin, keyRing);
    mtx.signInput(0, coin, keyRing);
    const spend = mtx.toTX();
    const txHex = spend.toRaw().toString("hex");
    console.log(spend)
    // const broadcast = await nodeClient.broadcast(txHex);
    // console.log(broadcast);
  } catch (err) {
    console.log(err)
  }
})();


